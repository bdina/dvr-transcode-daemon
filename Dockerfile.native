# To build image run `docker build --tag transcoder:<version> .`

# Multi-stage image ... creates intermediate layer(s) for doing the graalvm native
# build (this is discarded by docker post-build)
FROM ubuntu:22.04 AS build

ARG JAVA_VERSION=20.0.2
ARG GRAALVM_WORKDIR=/graalvm/src/project

ARG SCALA_VERSION=2.13.11
ARG GRADLE_VERSION=8.3

# Install tools required for project
# Run `docker build --no-cache .` to update dependencies
RUN apt-get update -y \
 && apt-get upgrade -y \
 && apt-get install -y wget unzip build-essential zlib1g-dev \
 && apt-get autoremove --purge -y \
 && wget https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${JAVA_VERSION}/graalvm-community-jdk-${JAVA_VERSION}_linux-x64_bin.tar.gz -P /tmp \
 && mkdir -p /opt/graalvm-community-jdk-${JAVA_VERSION} \
 && tar zxvf /tmp/graalvm-community-jdk-${JAVA_VERSION}_linux-x64_bin.tar.gz -C /opt/graalvm-community-jdk-${JAVA_VERSION} --strip-components 1 \
 && wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp \
 && unzip -d /opt /tmp/gradle-${GRADLE_VERSION}-bin.zip

ARG MUSL_VERSION=10.2.1
ARG ZLIB_VERSION=1.3

RUN wget http://more.musl.cc/${MUSL_VERSION}/x86_64-linux-musl/x86_64-linux-musl-native.tgz -P /tmp \
 && mkdir /opt/musl-${MUSL_VERSION} \
 && tar -zxvf /tmp/x86_64-linux-musl-native.tgz -C /opt/musl-${MUSL_VERSION}/ \
 && wget https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz -P /tmp \
 && tar -zxvf /tmp/zlib-${ZLIB_VERSION}.tar.gz -C /tmp

# Build MUSL to static link into application
ENV TOOLCHAIN_DIR=/opt/musl-${MUSL_VERSION}/x86_64-linux-musl-native

ENV PATH=$PATH:${TOOLCHAIN_DIR}/bin
ENV CC=$TOOLCHAIN_DIR/bin/gcc

WORKDIR /tmp/zlib-${ZLIB_VERSION}
RUN ./configure --prefix=${TOOLCHAIN_DIR} --static \
 && make \
 && make install \
 && rm -rf /tmp/zlib-${ZLIB_VERSION}/

ENV GRADLE_HOME=/opt/gradle-${GRADLE_VERSION}
ENV SCALA_HOME=/opt/scala-${SCALA_VERSION}
ENV JAVA_HOME=/opt/graalvm-community-jdk-${JAVA_VERSION}
ENV PATH=${JAVA_HOME}/bin:${GRADLE_HOME}/bin:${SCALA_HOME}/bin:${PATH}

RUN rm -rf /tmp/*

WORKDIR ${GRAALVM_WORKDIR}

# Copy the entire project and build it
# This layer is rebuilt when a file changes in the project directory
COPY . ${GRAALVM_WORKDIR}
RUN ${GRADLE_HOME}/bin/gradle -q --no-daemon nativeImage

# Create a staging image (this will be part of the distribution)
#FROM alpine AS app-stage
#FROM scratch AS app-stage
FROM ubuntu:22.04 AS app-stage

ARG GRAALVM_WORKDIR=/git/

# Install tools required for project
# Run `docker build --no-cache .` to update dependencies
RUN apt-get update -y \
 && apt-get upgrade -y \
 && apt-get install -y ffmpeg \
 && apt-get install -y libmfx1 libmfx-tools \
 && apt-get install -y libva-drm2 libva-x11-2 vainfo \
 && apt-get install -y intel-media-va-driver-non-free \
 && apt-get autoremove --purge -y

RUN rm -rf /tmp/*

ARG GRAALVM_WORKDIR

ENV GRAALVM_WORKDIR=${GRAALVM_WORKDIR}
ENV APP_HOME=/opt/transcoder
ENV PATH=${APP_HOME}/bin:${PATH}

WORKDIR ${APP_HOME}

COPY --from=build /graalvm/src/project/build/transcoder* ${APP_HOME}/

#CMD [ "/bin/sh" ]

# And we finally create the application layer
FROM app-stage AS app
ENTRYPOINT [ "./transcoder" ]
CMD [ "-XX:+PrintGC" , "-XX:+PrintGCTimeStamps" , "-XX:+VerboseGC" , "-d" ]
